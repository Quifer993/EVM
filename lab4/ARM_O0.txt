exponential_function(double):
        push    {r7}			//запомнить base pointer на стеке
        sub     sp, sp, #36		//расширяем стек на 36 байт
        add     r7, sp, #0		//копируем в r7 стек
        vstr.64 d0, [r7]		//записать в регистр d0 значение из адреса *r7
        mov     r2, #0			//запись начала единицы // зануление начальной части
        mov     r3, #0			//зануление последней части double
        movt    r3, 16368		//записать в последние 2 байта 16368 (в double 00..003FF0)
        strd    r2, [r7, #24]		//положить по адресу *r7+24 значение из r2-r3 // sum = 1
        mov     r2, #0			//<--
        mov     r3, #0			//same
        movt    r3, 16368		//-->
        strd    r2, [r7, #16]		//загрузить на стек по адресу *r7+16 значение из r2-r3 behind = 1
        mov     r2, #0			//<--
        mov     r3, #0			//same
        movt    r3, 16368		//-->
        strd    r2, [r7, #8]		//загрузить на стек по адресу *r7+8 значение из r2-r3 i = 1
        b       .L2			//прыг на L2
.L3:
        vldr.64 d17, [r7, #16]		//загрузка d17 = behind
        vldr.64 d16, [r7]		//d16 = power_num
        vmul.f64        d18, d17, d16	//d18 = d16 * d17 behind * power_num
        vldr.64 d17, [r7, #8]		//d17 = i
        vdiv.f64        d16, d18, d17	//d18 / d17 behind * power_num / i;
        vstr.64 d16, [r7, #16]		//--behind = behind * power_num / i;
        vldr.64 d17, [r7, #24]		//d17 = sum
        vldr.64 d16, [r7, #16]		//-- d16 = behind
        vadd.f64        d16, d17, d16	//d16 = sum+ behind
        vstr.64 d16, [r7, #24]		//sum = d16
        vldr.64 d16, [r7, #8]		//d16 = i
        vmov.f64        d17, #1.0e+0	//d17 = 1
        vadd.f64        d16, d16, d17	//d16 = i+ 1
        vstr.64 d16, [r7, #8]		//i = d16
.L2:
        vldr.64 d16, [r7, #8]		//в d16 значение i
        vldr.64 d17, .L5		//в d17 = 5000000000
        vcmpe.f64       d16, d17	//сравнение i и 5000000000
        vmrs    APSR_nzcv, FPSCR	//запись флага FP статусного регистра в APSR
        bmi     .L3			//прыг если negative					//Условный переход
        ldrd    r2, [r7, #24]		//загрузить в r2-r3 значение sum *r7+24
        vmov    d16, r2, r3		//записать в d16 = sum
        vmov.f64        d0, d16		//d0 = d16
        adds    r7, r7, #36		//очистка кадра стека r7 = r7+36
        mov     sp, r7			//стек на r7 / чистка стека
        ldr     r7, [sp], #4		//загрузить в r7 адрес *sp+4 возвращение r7(rbp) к предыдущей функции
        bx      lr			//переход по адресу lr
.L5:
        .word   536870912
        .word   1106419807
.LC0:
        .ascii  "Enter the number\000"
.LC1:
        .ascii  "%.10f\012\000"
main:
        push    {r7, lr}		//Помещаем на стек r7 и lr, чтобы затем вернуть их в исходное состояние
        sub     sp, sp, #16		//расширяем кадр стека на 16 (подобие rsp)
        add     r7, sp, #0		//r7 присваиваем sp + 0 = sp (подобие rbp в данной программе)
        str     r0, [r7, #4]		//argc закидываем на *r7+4
        str     r1, [r7]		//**argv закидываем на *r7
        ldr     r3, [r7, #4]		//загрузить в r3 значение из *r7+4 (argc)
        cmp     r3, #1			//сравнение r3 == 1
        bne     .L8			//прыг, если !=
        movw    r0, #:lower16:.LC0	//присвоить r0 нижние 16 бит L0
        movt    r0, #:upper16:.LC0	//присвоить r0 верхние 16 бит L0
        bl      puts			//выполнить puts
        movs    r3, #1			//return 1 
        b       .L9			//Прыг L9
.L8:
        ldr     r3, [r7]		//Загрузить в r3 значение из *r7
        adds    r3, r3, #4		//r3 = r3 + 4(argv[1])
        ldr     r3, [r3]		//
        mov     r0, r3			//
        bl      atof			//
        vstr.64 d0, [r7, #8]		//на стек
        vldr.64 d0, [r7, #8]		//со стека
        bl      exponential_function(double)	//вызов функции; lr принимает значение этого места, чтобы вернуться после выполнения
        vmov    r2, r3, d0		//r2 = low(d0); r3 = high(d0)
        movw    r0, #:lower16:.LC1	//присвоить r0 нижние 16 бит L1
        movt    r0, #:upper16:.LC1	//присвоить r0 верхние 16 бит L1
        bl      printf			//printf
        movs    r3, #0			//return 0
.L9:
        mov     r0, r3		//значение ret из r3 в r0
        adds    r7, r7, #16	//чистка кадра стека r7-16
        mov     sp, r7		//стек ставим там же, где и r7
        pop     {r7, pc}	//забираем значение со стека в r7 и pc == ProgramCounter(R15)